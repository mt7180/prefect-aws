name: Create Infrastructure and Deploy Prefect to AWS ECS Push Work Pool
run-name: IaC + Install Prefect Worker + Deploy Prefect Flow to AWS ECS triggered by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      memory:
        description: Memory for the agent
        required: true
        default: '512'
        type: choice
        options: ['512', '1024', '2048', '4096', '5120', '6144', '7168', '8192']
      aws_region:
        description: Desired region for AWS resources
        required: true
        default: 'eu-central-1'
        type: string

env:
  PROJECT: send-energy-report
  ECS_CLUSTER: prefect-aws-run
  CPU: '256'

jobs:
  create-aws-infrastructure:
    name: Create AWS Infrastructure
    runs-on: ubuntu-latest
    outputs:
      aws_ecs_cluster_arn: ${{ steps.pulumi.outputs.ecs_cluster_arn }}
      aws_vpc_id: ${{ steps.pulumi.outputs.vpc_id }}
      aws_task_role_arn: ${{ steps.pulumi.outputs.iam_task_role_arn }}
      aws_execution_role_arn: ${{ steps.pulumi.outputs.iam_execution_role_arn }}
    defaults:
      run:
        working-directory: ./infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Summary
        run: echo "### Workflow $GITHUB_WORKFLOW with GITHUB_SHA $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.AWS_REGION }}

      - name: Create Infrastructure with Pulumi
        id: pulumi
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: ${{ github.repository }}_backend/dev
          work-dir: ./infrastructure
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          APP_NAME :  ${{ github.repository }}
          GIT_USER : ${{ github.actor }}
      - run: |
          echo "Current AWS ECS Cluster arn: ${{ steps.pulumi.outputs.ecs_cluster_arn }}" >> $GITHUB_STEP_SUMMARY
          echo "Current AWS VPC id: ${{ steps.pulumi.outputs.vpc_id }}" >> $GITHUB_STEP_SUMMARY
          echo "Current AWS iam task role arn: ${{ steps.pulumi.outputs.iam_task_role_arn }}" >> $GITHUB_STEP_SUMMARY
          echo "Current AWS iam execution role arn ${{ steps.pulumi.outputs.iam_execution_role_arn }}" >> $GITHUB_STEP_SUMMARY
          
          # no-fail-on-empty-changeset: "1"
          # disable-rollback: "1"

      - name: Create AWS Infrastructure Summary
        run: echo "Infrastructure build at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  push-flow-to-aws-ecr:
    name: Create Docker Image from Flow and Push to AWS ECR
    needs: create-aws-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.AWS_REGION }}

      # Try it without Secrets since push workpool connects itself to ecs cluster
      # - name: Add Secrets to SSM Parameter Store (needed for container in ECS task)
      #   run: |
      #     aws ssm put-parameter --type "SecureString" --name "PREFECT_API_URL" --value "${{ secrets.PREFECT_API_URL}}" --overwrite
      #     aws ssm put-parameter --type "SecureString" --name "PREFECT_API_KEY" --value "${{ secrets.PREFECT_API_KEY}}" --overwrite
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$PROJECT:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$PROJECT:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$PROJECT:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: ECR image built
        run: echo "ECR image ${{ steps.build-image.outputs.image }} built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY


  deploy-prefect-flow:
    name: Deploy Prefect Flow to Prefect Cloud
    runs-on: ubuntu-latest
    needs: push-flow-to-aws-ecr
    steps:
      - name: Deploy Flow to Prefect
        uses: actions/checkout@v3
    
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Prefect Auth
        uses: PrefectHQ/actions-prefect-auth@v1
        with:
          prefect-api-key: ${{ secrets.PREFECT_API_KEY }}
          prefect-workspace: ${{ secrets.PREFECT_WORKSPACE }}

      # todo: configure
      # https://github.com/PrefectHQ/actions-prefect-deploy/tree/v3/
      - name: Run Prefect Deploy
        uses: PrefectHQ/actions-prefect-deploy@v3
        with:
          deployment-names: deploy_to_ecs_push_workpool
          requirements-file-paths: requirements.txt
      

      - name: Summary
        run: echo '### AWS resources and flow successfully deployed! :rocket:' >> $GITHUB_STEP_SUMMARY